/*20.5 Практическая работа
Что входит в работу:
1. Написать функцию, вычисляющую определитель.
2. Написать функцию, умножающую две матрицы.*/

package main

import (
	"fmt"
)

const row = 3
const col = 3

func determinant(m [row][col]int) int {
	return m[0][0]*m[1][1]*m[2][2] + m[0][1]*m[1][2]*m[2][0] + m[0][2]*m[1][0]*m[2][1] - m[0][2]*m[1][1]*m[2][0] - m[0][0]*m[1][2]*m[2][1] - m[0][1]*m[1][0]*m[2][2]
}

func multiplicationMatrix(mA [3][5]int, mB [5][4]int) [3][4]int {
	var mC [3][4]int
	/*
		mC[0][0] = mA[0][0]*mB[0][0] + mA[0][1]*mB[1][0] + mA[0][2]*mB[2][0] + mA[0][3]*mB[3][0] + mA[0][4]*mB[4][0]
		mC[0][1] = mA[0][0]*mB[0][1] + mA[0][1]*mB[1][1] + mA[0][2]*mB[2][1] + mA[0][3]*mB[3][1] + mA[0][4]*mB[4][1]
		mC[0][2] = mA[0][0]*mB[0][2] + mA[0][1]*mB[1][2] + mA[0][2]*mB[2][2] + mA[0][3]*mB[3][2] + mA[0][4]*mB[4][2]
		mC[0][3] = mA[0][0]*mB[0][3] + mA[0][1]*mB[1][3] + mA[0][2]*mB[2][3] + mA[0][3]*mB[3][3] + mA[0][4]*mB[4][3]
		mC[1][0] = mA[1][0]*mB[0][0] + mA[1][1]*mB[1][0] + mA[1][2]*mB[2][0] + mA[1][3]*mB[3][0] + mA[1][4]*mB[4][0]
		mC[1][1] = mA[1][0]*mB[0][1] + mA[1][1]*mB[1][1] + mA[1][2]*mB[2][1] + mA[1][3]*mB[3][1] + mA[1][4]*mB[4][1]
		mC[1][2] = mA[1][0]*mB[0][2] + mA[1][1]*mB[1][2] + mA[1][2]*mB[2][2] + mA[1][3]*mB[3][2] + mA[1][4]*mB[4][2]
		mC[1][3] = mA[1][0]*mB[0][3] + mA[1][1]*mB[1][3] + mA[1][2]*mB[2][3] + mA[1][3]*mB[3][3] + mA[1][4]*mB[4][3]
		mC[2][0] = mA[2][0]*mB[0][0] + mA[2][1]*mB[1][0] + mA[2][2]*mB[2][0] + mA[2][3]*mB[3][0] + mA[2][4]*mB[4][0]
		mC[2][1] = mA[2][0]*mB[0][1] + mA[2][1]*mB[1][1] + mA[2][2]*mB[2][1] + mA[2][3]*mB[3][1] + mA[2][4]*mB[4][1]
		mC[2][2] = mA[2][0]*mB[0][2] + mA[2][1]*mB[1][2] + mA[2][2]*mB[2][2] + mA[2][3]*mB[3][2] + mA[2][4]*mB[4][2]
		mC[2][3] = mA[2][0]*mB[0][3] + mA[2][1]*mB[1][3] + mA[2][2]*mB[2][3] + mA[2][3]*mB[3][3] + mA[2][4]*mB[4][3]
	*/
	for i := 0; i < 3; i++ {
		for j := 0; j < 4; j++ {
			mC[i][j] = mA[i][0]*mB[0][j] + mA[i][1]*mB[1][j] + mA[i][2]*mB[2][j] + mA[i][3]*mB[3][j] + mA[i][4]*mB[4][j]
		}
	}
	return mC
}

func main() {
	// Функция вычисляет определитель матрицы размером 3 × 3.
	fmt.Println("Задание  1. Подсчёт определителя.")

	matrix := [row][col]int{
		{11, 12, 13},
		{21, 22, 23},
		{31, 32, 33},
	}
	delta := determinant(matrix)

	fmt.Println("Для матрицы:")
	for i := 0; i < len(matrix); i++ {
		fmt.Println(matrix[i])
	}
	fmt.Println("Определитель равен:", delta)
	fmt.Println("__________________________________")

	// Функция умножает две матрицы размерами 3 × 5 и 5 × 4.
	// Количество столбцов матрицы А должно быть равно количеству строк матрицы В"
	fmt.Println("Задание 2. Умножение матриц.")

	matrixA := [3][5]int{
		{1, 2, 3, 4, 5},
		{2, 4, 3, 5, 9},
		{3, 7, 8, 2, 1},
	}
	matrixB := [5][4]int{
		{1, 2, 3, 4},
		{2, 3, 4, 5},
		{3, 4, 5, 6},
		{4, 5, 6, 7},
		{5, 2, 3, 4},
	}
	matrixС := multiplicationMatrix(matrixA, matrixB)

	fmt.Println("Результат умножения матрицы А {3х5} :")
	for i := 0; i < len(matrixA); i++ {
		fmt.Println(matrixA[i])
	}
	fmt.Println("на матрицу В {5х4} :")
	for i := 0; i < len(matrixB); i++ {
		fmt.Println(matrixB[i])
	}
	fmt.Println("равен матрице С:")
	for i := 0; i < len(matrixС); i++ {
		fmt.Println(matrixС[i])
	}

	fmt.Println("---------End------------")
}
